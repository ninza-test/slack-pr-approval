name: build
on:
  push:
    branches:
      - main
  pull_request:
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Checkout ignore file
        uses: actions/checkout@v3
        id: check_ignore_file
        with:
          repository: ninza-test/sca_managment
          token: ${{ secrets.GH_TOKEN }}  # Use GitHub's default token
          ref: main  # Ensure the branch exists
          path: sca_managment

      - name: Generate .trivyignore from centralized ignore list
        run: |
          echo "üîç Extracting ignored CVEs for this repository..."
      
          FULL_REPO="${{ github.repository }}"          # e.g. ninza-test/slack-pr-approval
          REPO_NAME=$(basename "$FULL_REPO")            # Extract 'slack-pr-approval'
      
          JSON_FILE="sca_managment/cveignore.json"
          TRIVYIGNORE=".trivyignore"
      
          echo "üì¶ Current repository: $REPO_NAME"
          echo "üìÑ Using JSON file: $JSON_FILE"
      
          if [ ! -f "$JSON_FILE" ]; then
            echo "‚ùå JSON file not found at $JSON_FILE"
            exit 1
          fi
      
          MATCH=$(jq -r "has(\"$REPO_NAME\")" "$JSON_FILE")
          if [ "$MATCH" != "true" ]; then
            echo "‚ö†Ô∏è  No ignored CVEs found for repo: $REPO_NAME"
            touch "$TRIVYIGNORE"
          else
            jq -r ".\"$REPO_NAME\".ignored_cves[].cve_id" "$JSON_FILE" > "$TRIVYIGNORE"
            echo "‚úÖ .trivyignore created with the following CVEs:"
            cat "$TRIVYIGNORE"
          fi

      - name: heloc hecking
        run: |
           ls -la
          
      - name: Extract Ignored CVEs for the Current Repo and Create .trivyignore
        id: create_trivyignore
        run: |
          REPO_NAME="${{ github.event.repository.name }}"
          echo "Repository: $REPO_NAME"

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scanners: vuln,license
          format: json
          exit-code: 0
          output: 'trivy-results.json'
          severity: 'CRITICAL'

      - name: Fail pipeline if CRITICAL vulnerabilities are found
        run: |
          if jq '.Results[].Vulnerabilities[]? | select(.Severity == "CRITICAL")' trivy-results.json | grep -q .; then
            echo "‚ùå CRITICAL vulnerabilities found. Failing the pipeline."
            exit 1
          else
            echo "‚úÖ No CRITICAL vulnerabilities found."
          fi
